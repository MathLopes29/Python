{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyMP7k5d6flQJ7sjojiVcVMs"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# LINGUAGEM NATURAL"],"metadata":{"id":"WKyFuBwLeQnS"}},{"cell_type":"code","source":["import spacy\n","spacy.__version__\n","\n","!python -m spacy download pt"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"68c8gLs6c_IS","executionInfo":{"status":"ok","timestamp":1724957972877,"user_tz":180,"elapsed":12950,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"e0d0f32f-a934-4cb5-eaba-1560fe16eae0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[38;5;3m⚠ As of spaCy v3.0, shortcuts like 'pt' are deprecated. Please use the\n","full pipeline package name 'pt_core_news_sm' instead.\u001b[0m\n","Collecting pt-core-news-sm==3.7.0\n","  Downloading https://github.com/explosion/spacy-models/releases/download/pt_core_news_sm-3.7.0/pt_core_news_sm-3.7.0-py3-none-any.whl (13.0 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.0/13.0 MB\u001b[0m \u001b[31m55.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: spacy<3.8.0,>=3.7.0 in /usr/local/lib/python3.10/dist-packages (from pt-core-news-sm==3.7.0) (3.7.6)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.11 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (3.0.12)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (1.0.5)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (1.0.10)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (2.0.8)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (3.0.9)\n","Requirement already satisfied: thinc<8.3.0,>=8.2.2 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (8.2.5)\n","Requirement already satisfied: wasabi<1.2.0,>=0.9.1 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (1.1.3)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.3 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (2.4.8)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (2.0.10)\n","Requirement already satisfied: weasel<0.5.0,>=0.1.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (0.4.1)\n","Requirement already satisfied: typer<1.0.0,>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (0.12.5)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (4.66.5)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (2.32.3)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (2.8.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (3.1.4)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (71.0.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (24.1)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (3.4.0)\n","Requirement already satisfied: numpy>=1.19.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (1.26.4)\n","Requirement already satisfied: language-data>=1.2 in /usr/local/lib/python3.10/dist-packages (from langcodes<4.0.0,>=3.2.0->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (1.2.0)\n","Requirement already satisfied: annotated-types>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.20.1 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (2.20.1)\n","Requirement already satisfied: typing-extensions>=4.6.1 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (4.12.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (3.8)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (2024.7.4)\n","Requirement already satisfied: blis<0.8.0,>=0.7.8 in /usr/local/lib/python3.10/dist-packages (from thinc<8.3.0,>=8.2.2->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (0.7.11)\n","Requirement already satisfied: confection<1.0.0,>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from thinc<8.3.0,>=8.2.2->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (0.1.5)\n","Requirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0.0,>=0.3.0->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (8.1.7)\n","Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0.0,>=0.3.0->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (1.5.4)\n","Requirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0.0,>=0.3.0->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (13.8.0)\n","Requirement already satisfied: cloudpathlib<1.0.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from weasel<0.5.0,>=0.1.0->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (0.18.1)\n","Requirement already satisfied: smart-open<8.0.0,>=5.2.1 in /usr/local/lib/python3.10/dist-packages (from weasel<0.5.0,>=0.1.0->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (7.0.4)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (2.1.5)\n","Requirement already satisfied: marisa-trie>=0.7.7 in /usr/local/lib/python3.10/dist-packages (from language-data>=1.2->langcodes<4.0.0,>=3.2.0->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (1.2.0)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (3.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (2.16.1)\n","Requirement already satisfied: wrapt in /usr/local/lib/python3.10/dist-packages (from smart-open<8.0.0,>=5.2.1->weasel<0.5.0,>=0.1.0->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (1.16.0)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy<3.8.0,>=3.7.0->pt-core-news-sm==3.7.0) (0.1.2)\n","\u001b[38;5;2m✔ Download and installation successful\u001b[0m\n","You can now load the package via spacy.load('pt_core_news_sm')\n","\u001b[38;5;3m⚠ Restart to reload dependencies\u001b[0m\n","If you are in a Jupyter or Colab notebook, you may need to restart Python in\n","order to load all the package's dependencies. You can do this by selecting the\n","'Restart kernel' or 'Restart runtime' option.\n"]}]},{"cell_type":"code","source":["pln = spacy.load(\"pt_core_news_sm\")\n","pln"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g4wX6KdagawF","executionInfo":{"status":"ok","timestamp":1724957973595,"user_tz":180,"elapsed":756,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"e48ddfe5-d556-4564-d1e6-bdf9f26260c5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<spacy.lang.pt.Portuguese at 0x7e2476f3db10>"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["documento = pln('Estou aprendendo processamento de linguagem natural, curso de desenvolvimento multiplataforma em São Paulo')\n","\n","for token in documento:\n","  print(token.text, token.pos_)\n","\n","for token in documento:\n","  print(token.text, token.lemma_, token.pos_, token.tag_, token.dep_,\n","        token.shape_, token.is_alpha, token.is_stop)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8gws2SrUjFhL","executionInfo":{"status":"ok","timestamp":1724959083359,"user_tz":180,"elapsed":310,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"c1f5552d-5c7e-4be0-d75b-4a7425755d79"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Estou AUX\n","aprendendo VERB\n","processamento NOUN\n","de ADP\n","linguagem NOUN\n","natural ADJ\n",", PUNCT\n","curso NOUN\n","de ADP\n","desenvolvimento NOUN\n","multiplataforma ADJ\n","em ADP\n","São PROPN\n","Paulo PROPN\n","Estou estar AUX AUX aux Xxxxx True True\n","aprendendo aprender VERB VERB ROOT xxxx True False\n","processamento processamento NOUN NOUN obj xxxx True False\n","de de ADP ADP case xx True True\n","linguagem linguagem NOUN NOUN nmod xxxx True False\n","natural natural ADJ ADJ amod xxxx True False\n",", , PUNCT PUNCT punct , False False\n","curso curso NOUN NOUN obj xxxx True False\n","de de ADP ADP case xx True True\n","desenvolvimento desenvolvimento NOUN NOUN nmod xxxx True False\n","multiplataforma multiplataforma ADJ ADJ amod xxxx True False\n","em em ADP ADP case xx True True\n","São São PROPN PROPN nmod Xxx True True\n","Paulo Paulo PROPN PROPN flat:name Xxxxx True False\n"]}]},{"cell_type":"code","source":["for token in documento:\n","  if token.pos_ == 'PROPN':\n","    print(token.text)\n","\n","for token in documento:\n","  print(token.text, token.lemma_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hz_Ws0GwmCNf","executionInfo":{"status":"ok","timestamp":1724959437305,"user_tz":180,"elapsed":313,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"51cab2a3-412b-45cb-f0cc-4d81d7c44310"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["São\n","Paulo\n","Estou estar\n","aprendendo aprender\n","processamento processamento\n","de de\n","linguagem linguagem\n","natural natural\n",", ,\n","curso curso\n","de de\n","desenvolvimento desenvolvimento\n","multiplataforma multiplataforma\n","em em\n","São São\n","Paulo Paulo\n"]}]},{"cell_type":"code","source":["doc = pln('encontrei encontraram encontrarão encontrariam cursando curso cursei')\n","[token.lemma_ for token in doc]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y8k-uBo-otD9","executionInfo":{"status":"ok","timestamp":1724960286026,"user_tz":180,"elapsed":408,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"e45106a6-2a23-4760-e1cf-f46ea2827995"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['encontrar',\n"," 'encontrar',\n"," 'encontrar',\n"," 'encontrar',\n"," 'cursar',\n"," 'curso',\n"," 'cursar']"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["import nltk\n","nltk.download('rslp')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GII16nzUpSsU","executionInfo":{"status":"ok","timestamp":1724960309824,"user_tz":180,"elapsed":2421,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"65c0babe-719e-4af5-d181-2064a10ee689"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package rslp to /root/nltk_data...\n","[nltk_data]   Unzipping stemmers/rslp.zip.\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["stemmer = nltk.stem.RSLPStemmer()\n","stemmer.stem('aprender')\n","stemmer.stem('curso')\n","\n","\n","for token in doc:\n","  print(token.text, token.lemma_, stemmer.stem(token.text))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T_CXmlhbpYGw","executionInfo":{"status":"ok","timestamp":1724960368627,"user_tz":180,"elapsed":270,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"76a107b2-ae00-4873-e465-a13826217bce"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["encontrei encontrar encontr\n","encontraram encontrar encontr\n","encontrarão encontrar encontr\n","encontrariam encontrar encontr\n","cursando cursar curs\n","curso curso curs\n","cursei cursar curs\n"]}]},{"cell_type":"code","source":["texto = 'A IBM é uma empresa dos Estados Unidos voltada para a área de informática. Sua sede no Brasil fica em São Paulo e a receita em 2018 foi de aproximadamente 320 bilhões de reais'\n","documento = pln(texto)\n","\n","for entidade in documento.ents:\n","  print(entidade.text, entidade.label_)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mOI6S4AlyFWF","executionInfo":{"status":"ok","timestamp":1724962595299,"user_tz":180,"elapsed":313,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"0a427f0c-bd6a-47b6-8b98-c1108fd0dae4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["IBM ORG\n","Estados Unidos LOC\n","Brasil LOC\n","São Paulo LOC\n"]}]},{"cell_type":"code","source":["\n","from spacy import displacy\n","displacy.render(documento, style = 'ent', jupyter = True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":87},"id":"jUV5NaajyGzx","executionInfo":{"status":"ok","timestamp":1724962607049,"user_tz":180,"elapsed":487,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"23ee80b7-689f-45b5-cb89-f08607fc22ea"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<span class=\"tex2jax_ignore\"><div class=\"entities\" style=\"line-height: 2.5; direction: ltr\">A \n","<mark class=\"entity\" style=\"background: #7aecec; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n","    IBM\n","    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">ORG</span>\n","</mark>\n"," é uma empresa dos \n","<mark class=\"entity\" style=\"background: #ff9561; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n","    Estados Unidos\n","    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">LOC</span>\n","</mark>\n"," voltada para a área de informática. Sua sede no \n","<mark class=\"entity\" style=\"background: #ff9561; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n","    Brasil\n","    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">LOC</span>\n","</mark>\n"," fica em \n","<mark class=\"entity\" style=\"background: #ff9561; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n","    São Paulo\n","    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">LOC</span>\n","</mark>\n"," e a receita em 2018 foi de aproximadamente 320 bilhões de reais</div></span>"]},"metadata":{}}]},{"cell_type":"code","source":["from spacy.lang.pt.stop_words import STOP_WORDS\n","print(STOP_WORDS)\n","len(STOP_WORDS)\n","for token in documento:\n","  if not pln.vocab[token.text].is_stop:\n","    print(token.text)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q37mrMtByNQp","executionInfo":{"status":"ok","timestamp":1724962628018,"user_tz":180,"elapsed":338,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"fd72e066-a558-4041-8cf9-42a1e79da4bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'coisa', 'sem', 'este', 'tente', 'possivelmente', 'tem', 'próprio', 'quem', 'numa', 'nas', 'nosso', 'terceiro', 'nove', 'nada', 'nos', 'estar', 'vossas', 'seu', 'quarta', 'em', 'corrente', 'pelos', 'aquele', 'desse', 'quero', 'enquanto', 'suas', 'grandes', 'nuns', 'através', 'atrás', 'embora', 'todas', 'outros', 'dizem', 'após', 'naquela', 'nesse', 'aqui', 'antes', 'dezanove', 'ligado', 'disso', 'fará', 'nossos', 'longe', 'no', 'comprido', 'esse', 'seria', 'fomos', 'fazem', 'estivestes', 'mais', 'foste', 'geral', 'dá', 'o', 'bastante', 'vossos', 'teu', 'valor', 'como', 'quinze', 'oito', 'das', 'sempre', 'dezoito', 'maior', 'tal', 'deve', 'diz', 'seis', 'for', 'nós', 'vindo', 'depois', 'muitos', 'eu', 'é', 'te', 'pôde', 'me', 'vem', 'e', 'querem', 'vais', 'todo', 'certeza', 'quatro', 'seus', 'mas', 'nem', 'muito', 'até', 'falta', 'sim', 'dezassete', 'somos', 'área', 'às', 'grande', 'minhas', 'fazia', 'obrigada', 'cá', 'dois', 'num', 'tu', 'da', 'estão', 'era', 'quieto', 'toda', 'deverá', 'conhecido', 'exemplo', 'mesmo', 'questão', 'portanto', 'dão', 'terceira', 'de', 'tentaram', 'vocês', 'maioria', 'nessa', 'têm', 'estivemos', 'apontar', 'segundo', 'dentro', 'pelas', 'menos', 'sei', 'porquanto', 'ora', 'minha', 'perto', 'veja', 'dez', 'só', 'possível', 'somente', 'temos', 'já', 'tudo', 'povo', 'algo', 'outras', 'acerca', 'aqueles', 'alguns', 'quinto', 'pelo', 'dizer', 'umas', 'essas', 'fostes', 'meu', 'grupo', 'ser', 'ponto', 'estes', 'meses', 'sobre', 'mil', 'os', 'cima', 'sua', 'segunda', 'sob', 'certamente', 'menor', 'posso', 'momento', 'doze', 'logo', 'fazemos', 'fui', 'ontem', 'põe', 'quinta', 'dessa', 'as', 'podem', 'também', 'fazeis', 'nossas', 'cujo', 'vários', 'relação', 'sois', 'números', 'cada', 'onze', 'vos', 'diante', 'ou', 'eles', 'todos', 'saber', 'tens', 'desde', 'meio', 'nossa', 'está', 'se', 'és', 'local', 'do', 'quarto', 'tentei', 'tiveste', 'fazes', 'vós', 'ambas', 'último', 'lado', 'ela', 'lugar', 'tenho', 'esses', 'nenhuma', 'outra', 'nível', 'pegar', 'estado', 'contudo', 'um', 'fazer', 'conhecida', 'pois', 'breve', 'vão', 'iniciar', 'pontos', 'oitava', 'sou', 'aquilo', 'demais', 'vêm', 'máximo', 'final', 'talvez', 'tuas', 'cuja', 'tivestes', 'direita', 'tipo', 'naquele', 'apoio', 'põem', 'isto', 'ademais', 'favor', 'pela', 'sabe', 'novo', 'quais', 'quer', 'vezes', 'primeira', 'ambos', 'irá', 'fim', 'podia', 'que', 'uns', 'algumas', 'bom', 'essa', 'poder', 'ali', 'catorze', 'ver', 'próximo', 'qualquer', 'treze', 'à', 'primeiro', 'a', 'foram', 'elas', 'para', 'deste', 'neste', 'na', 'parte', 'parece', 'uma', 'posição', 'tentar', 'estava', 'desta', 'estiveste', 'tendes', 'tanta', 'fez', 'dos', 'tão', 'lhe', 'vinte', 'conselho', 'pouco', 'quê', 'comprida', 'custa', 'não', 'sistema', 'vai', 'tiveram', 'partir', 'nesta', 'novas', 'próxima', 'aquelas', 'obrigado', 'onde', 'ir', 'cento', 'tua', 'puderam', 'teve', 'baixo', 'debaixo', 'forma', 'teus', 'apoia', 'estará', 'tais', 'duas', 'inicio', 'tivemos', 'sétima', 'zero', 'assim', 'devem', 'poderá', 'porque', 'mal', 'isso', 'sétimo', 'com', 'estive', 'cinco', 'meus', 'ele', 'fora', 'vez', 'pode', 'porém', 'quanto', 'são', 'vens', 'aí', 'então', 'tanto', 'estas', 'sete', 'porquê', 'daquela', 'nunca', 'lá', 'pouca', 'quando', 'bem', 'vossa', 'número', 'boa', 'estiveram', 'você', 'mês', 'tempo', 'vinda', 'usa', 'além', 'faço', 'foi', 'tarde', 'caminho', 'faz', 'aos', 'estás', 'ter', 'tive', 'ainda', 'des', 'sexto', 'oitavo', 'entre', 'contra', 'usar', 'quieta', 'esteve', 'cedo', 'eventual', 'aquela', 'qual', 'nova', 'estou', 'sexta', 'vosso', 'dar', 'novos', 'inclusive', 'adeus', 'agora', 'apenas', 'maiorias', 'dezasseis', 'daquele', 'três', 'por', 'ao', 'esta'}\n","IBM\n","empresa\n","Estados\n","Unidos\n","voltada\n","informática\n",".\n","sede\n","Brasil\n","fica\n","Paulo\n","receita\n","2018\n","aproximadamente\n","320\n","bilhões\n","reais\n"]}]},{"cell_type":"code","source":["\n","p1 = pln(\"olá\")\n","p2 = pln(\"oi\")\n","p3 = pln(\"ou\")\n","\n","p1.similarity(p2)"],"metadata":{"id":"xctumcU02Tgp","executionInfo":{"status":"ok","timestamp":1724963710342,"user_tz":180,"elapsed":309,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"f8e9683e-494e-4557-c115-5e70adfd079e","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-28-3ac31f30e33d>:5: UserWarning: [W007] The model you're using has no word vectors loaded, so the result of the Doc.similarity method will be based on the tagger, parser and NER, which may not give useful similarity judgements. This may happen if you're using one of the small models, e.g. `en_core_web_sm`, which don't ship with word vectors and only use context-sensitive tensors. You can always add your own word vectors, or use one of the larger models instead if available.\n","  p1.similarity(p2)\n"]},{"output_type":"execute_result","data":{"text/plain":["0.014538315607009597"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["texto1 = pln('Quando será lançado o novo filme?')\n","texto2 = pln('O novo filme será lançado mês que vem')\n","texto3 = pln('Qual a cor do carro?')\n","\n","texto = pln('gato cachorro cavalo pessoa')\n","\n","for texto1 in texto:\n","  #print('----', texto1)\n","  for texto2 in texto:\n","    #print(texto2)\n","    similaridade = int(texto1.similarity(texto2) * 100)\n","    print(\"{} é {} similar a {}\".format(texto1, similaridade, texto2))"],"metadata":{"id":"KP8qPNZ32Xm8","executionInfo":{"status":"ok","timestamp":1724963725198,"user_tz":180,"elapsed":473,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"f65ef04d-1141-4114-a83a-77df0c42201d","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["gato é 100 similar a gato\n","gato é 56 similar a cachorro\n","gato é 36 similar a cavalo\n","gato é 16 similar a pessoa\n","cachorro é 56 similar a gato\n","cachorro é 100 similar a cachorro\n","cachorro é 57 similar a cavalo\n","cachorro é 16 similar a pessoa\n","cavalo é 36 similar a gato\n","cavalo é 57 similar a cachorro\n","cavalo é 100 similar a cavalo\n","cavalo é 33 similar a pessoa\n","pessoa é 16 similar a gato\n","pessoa é 16 similar a cachorro\n","pessoa é 33 similar a cavalo\n","pessoa é 100 similar a pessoa\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-30-c9dff980593b>:11: UserWarning: [W007] The model you're using has no word vectors loaded, so the result of the Token.similarity method will be based on the tagger, parser and NER, which may not give useful similarity judgements. This may happen if you're using one of the small models, e.g. `en_core_web_sm`, which don't ship with word vectors and only use context-sensitive tensors. You can always add your own word vectors, or use one of the larger models instead if available.\n","  similaridade = int(texto1.similarity(texto2) * 100)\n"]}]},{"cell_type":"markdown","source":["# IMPORT"],"metadata":{"id":"QgWLmUC7XsLl"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"rRUcK2soTW7y"},"outputs":[],"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as srn\n","import statistics as sts"]},{"cell_type":"code","source":["df = pd.read_csv(\"/content/tempo.csv\", sep=\";\")\n","df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SfltTnm9Telg","executionInfo":{"status":"ok","timestamp":1724115737471,"user_tz":180,"elapsed":7,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"3de5c7ba-adce-4843-8e0a-8739be1b400c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 14 entries, 0 to 13\n","Data columns (total 5 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   Aparencia    14 non-null     object \n"," 1   Temperatura  14 non-null     int64  \n"," 2   Umidade      13 non-null     float64\n"," 3   Vento        13 non-null     object \n"," 4   Jogar        14 non-null     object \n","dtypes: float64(1), int64(1), object(3)\n","memory usage: 688.0+ bytes\n"]}]},{"cell_type":"code","source":["df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q27Ueb9FTwZN","executionInfo":{"status":"ok","timestamp":1724115793062,"user_tz":180,"elapsed":447,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"4614a233-7e0d-4d0e-a9ad-0153f0ea93b0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(14, 5)"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"KZXX3jYkT4lM","executionInfo":{"status":"ok","timestamp":1724115818533,"user_tz":180,"elapsed":399,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"b626c2c4-bfd1-4e3b-8a3c-956f0862f58f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Temperatura     Umidade\n","count    14.000000   13.000000\n","mean    155.571429   89.769231\n","std     306.433759   34.540203\n","min      64.000000   65.000000\n","25%      69.250000   70.000000\n","50%      73.500000   85.000000\n","75%      80.750000   90.000000\n","max    1220.000000  200.000000"],"text/html":["\n","  <div id=\"df-f3488937-59b0-4ca3-9b69-bc81702588e7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Temperatura</th>\n","      <th>Umidade</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>14.000000</td>\n","      <td>13.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>155.571429</td>\n","      <td>89.769231</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>306.433759</td>\n","      <td>34.540203</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>64.000000</td>\n","      <td>65.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>69.250000</td>\n","      <td>70.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>73.500000</td>\n","      <td>85.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>80.750000</td>\n","      <td>90.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1220.000000</td>\n","      <td>200.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f3488937-59b0-4ca3-9b69-bc81702588e7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f3488937-59b0-4ca3-9b69-bc81702588e7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f3488937-59b0-4ca3-9b69-bc81702588e7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-81047242-4a2d-4755-a582-5891c7be03f6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-81047242-4a2d-4755-a582-5891c7be03f6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-81047242-4a2d-4755-a582-5891c7be03f6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Temperatura\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 402.7987603443112,\n        \"min\": 14.0,\n        \"max\": 1220.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          155.57142857142858,\n          73.5,\n          14.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Umidade\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55.41319145619541,\n        \"min\": 13.0,\n        \"max\": 200.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          89.76923076923077,\n          85.0,\n          13.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["df.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"Fq-I-KqiTztd","executionInfo":{"status":"ok","timestamp":1724115801512,"user_tz":180,"elapsed":346,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"87ec892e-3699-4c36-beff-a74827cb4183"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Aparencia  Temperatura  Umidade       Vento Jogar\n","9      chuva           75    200.0         NaN   sim\n","10       sol           75     70.0  VERDADEIRO   sim\n","11   nublado           72     90.0  VERDADEIRO   sim\n","12   nublado           81     75.0       FALSO   sim\n","13     chuva           71     91.0  VERDADEIRO   nao"],"text/html":["\n","  <div id=\"df-5059a262-85f6-440a-aa68-9061d98569fc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Aparencia</th>\n","      <th>Temperatura</th>\n","      <th>Umidade</th>\n","      <th>Vento</th>\n","      <th>Jogar</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>9</th>\n","      <td>chuva</td>\n","      <td>75</td>\n","      <td>200.0</td>\n","      <td>NaN</td>\n","      <td>sim</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>sol</td>\n","      <td>75</td>\n","      <td>70.0</td>\n","      <td>VERDADEIRO</td>\n","      <td>sim</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>nublado</td>\n","      <td>72</td>\n","      <td>90.0</td>\n","      <td>VERDADEIRO</td>\n","      <td>sim</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>nublado</td>\n","      <td>81</td>\n","      <td>75.0</td>\n","      <td>FALSO</td>\n","      <td>sim</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>chuva</td>\n","      <td>71</td>\n","      <td>91.0</td>\n","      <td>VERDADEIRO</td>\n","      <td>nao</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5059a262-85f6-440a-aa68-9061d98569fc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5059a262-85f6-440a-aa68-9061d98569fc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5059a262-85f6-440a-aa68-9061d98569fc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-414bd688-f65e-4bcf-9220-fd3f182fdd45\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-414bd688-f65e-4bcf-9220-fd3f182fdd45')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-414bd688-f65e-4bcf-9220-fd3f182fdd45 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Aparencia\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"chuva\",\n          \"sol\",\n          \"nublado\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temperatura\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 71,\n        \"max\": 81,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          72,\n          71,\n          75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Umidade\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53.78382656524171,\n        \"min\": 70.0,\n        \"max\": 200.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          70.0,\n          91.0,\n          90.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Vento\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"FALSO\",\n          \"VERDADEIRO\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Jogar\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"nao\",\n          \"sim\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"H3JxLCbZT2UE","executionInfo":{"status":"ok","timestamp":1724115812233,"user_tz":180,"elapsed":451,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"388d3376-ed69-4e2c-a3c4-e500a84066ba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Aparencia  Temperatura  Umidade       Vento Jogar\n","0       sol           85     85.0       FALSO   nao\n","1       sol           80     90.0  VERDADEIRO   nao\n","2   nublado           83     86.0       FALSO   sim\n","3     chuva           70      NaN       FALSO   sim\n","4     chuva           68     80.0       FALSO   sim"],"text/html":["\n","  <div id=\"df-e5c14652-6311-4890-acf3-c057e9281bc9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Aparencia</th>\n","      <th>Temperatura</th>\n","      <th>Umidade</th>\n","      <th>Vento</th>\n","      <th>Jogar</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>sol</td>\n","      <td>85</td>\n","      <td>85.0</td>\n","      <td>FALSO</td>\n","      <td>nao</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>sol</td>\n","      <td>80</td>\n","      <td>90.0</td>\n","      <td>VERDADEIRO</td>\n","      <td>nao</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>nublado</td>\n","      <td>83</td>\n","      <td>86.0</td>\n","      <td>FALSO</td>\n","      <td>sim</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>chuva</td>\n","      <td>70</td>\n","      <td>NaN</td>\n","      <td>FALSO</td>\n","      <td>sim</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>chuva</td>\n","      <td>68</td>\n","      <td>80.0</td>\n","      <td>FALSO</td>\n","      <td>sim</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e5c14652-6311-4890-acf3-c057e9281bc9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e5c14652-6311-4890-acf3-c057e9281bc9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e5c14652-6311-4890-acf3-c057e9281bc9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f6e8f285-0071-41c8-a44e-2b79e746f1eb\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f6e8f285-0071-41c8-a44e-2b79e746f1eb')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f6e8f285-0071-41c8-a44e-2b79e746f1eb button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"Aparencia\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"nublado\",\n          \"menos\",\n          \"sol\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temperatura\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 306,\n        \"min\": 64,\n        \"max\": 1220,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          81,\n          75,\n          85\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Umidade\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34.540203256866356,\n        \"min\": 65.0,\n        \"max\": 200.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          75.0,\n          90.0,\n          65.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Vento\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"VERDADEIRO\",\n          \"FALSO\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Jogar\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"sim\",\n          \"nao\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"Kkqgw-snTrJ0","executionInfo":{"status":"ok","timestamp":1724115779797,"user_tz":180,"elapsed":343,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"eefb58d9-aff3-4a36-c569-7e0364e833b3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Aparencia      0\n","Temperatura    0\n","Umidade        1\n","Vento          1\n","Jogar          0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Aparencia</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Temperatura</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Umidade</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Vento</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Jogar</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["# UMIDADE"],"metadata":{"id":"9r2K-RJEX1k0"}},{"cell_type":"code","source":["# MEDIANA DOS VALORES\n","medianaUmidade = sts.median(df['Umidade'])\n","medianaUmidade"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ep6o9N2JUbHF","executionInfo":{"status":"ok","timestamp":1724115991466,"user_tz":180,"elapsed":372,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"15be3276-406a-4e3c-b769-c0b6a5db0b65"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["85.5"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["# SUBSTITUIÇÃO\n","df.loc[df['Umidade']>130] = medianaUmidade"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OUB0MsO6Ukek","executionInfo":{"status":"ok","timestamp":1724116010121,"user_tz":180,"elapsed":324,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"b8998c54-d30c-495b-d225-f6755a44e194"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-13-82477e37d909>:1: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value '85.5' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  df.loc[df['Umidade']>130] = medianaUmidade\n"]}]},{"cell_type":"code","source":["# VALIDAÇÃO DOS NULOS\n","df.groupby(['Umidade']).size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":429},"id":"_TtD4btqUrcO","executionInfo":{"status":"ok","timestamp":1724116026756,"user_tz":180,"elapsed":382,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"dd208f16-f467-4856-f702-067e1a9f9df9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Umidade\n","65.0    1\n","70.0    3\n","75.0    1\n","80.0    1\n","85.0    1\n","85.5    1\n","86.0    1\n","90.0    2\n","91.0    1\n","95.0    1\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","    <tr>\n","      <th>Umidade</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>65.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>70.0</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>75.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>80.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>85.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>85.5</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>86.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>90.0</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>91.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>95.0</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["# VALIDAÇÃO\n","df.loc[df['Umidade']>130]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":53},"id":"J8e5Mf4gUuck","executionInfo":{"status":"ok","timestamp":1724116043253,"user_tz":180,"elapsed":517,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"823a1c87-4537-4b09-80ec-db6b3e0e3aa3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Empty DataFrame\n","Columns: [Aparencia, Temperatura, Umidade, Vento, Jogar]\n","Index: []"],"text/html":["\n","  <div id=\"df-650bab91-b2cb-4438-bc46-abfa1b5e3396\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Aparencia</th>\n","      <th>Temperatura</th>\n","      <th>Umidade</th>\n","      <th>Vento</th>\n","      <th>Jogar</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-650bab91-b2cb-4438-bc46-abfa1b5e3396')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-650bab91-b2cb-4438-bc46-abfa1b5e3396 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-650bab91-b2cb-4438-bc46-abfa1b5e3396');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","repr_error":"Out of range float values are not JSON compliant: nan"}},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["df['Umidade'].fillna(medianaUmidade, inplace=True)"],"metadata":{"id":"pcK0WGitUzxU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"pvi4BhOIU2oE","executionInfo":{"status":"ok","timestamp":1724116071964,"user_tz":180,"elapsed":365,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"0f7d4146-78e7-48ea-8d4f-49c084669260"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Aparencia      0\n","Temperatura    0\n","Umidade        0\n","Vento          0\n","Jogar          0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Aparencia</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Temperatura</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Umidade</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Vento</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Jogar</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["df['Umidade'].plot(style='-o' , linewidth=2.5, color='darkred', figsize=(10,5), grid=True)\n","plt.title(\"Registros de Umidade\")\n","plt.xlabel(\"Tempo\")\n","plt.ylabel(\"Umidade\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"r2kmGgztY9RI","executionInfo":{"status":"ok","timestamp":1724117152494,"user_tz":180,"elapsed":1059,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"45e538d9-1e3d-414c-98b3-f9b43f615422"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# VENTO"],"metadata":{"id":"whTC1tdtYBaN"}},{"cell_type":"code","source":["df.groupby(['Vento']).size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":210},"id":"KSu3dmkNU6_e","executionInfo":{"status":"ok","timestamp":1724116179818,"user_tz":180,"elapsed":339,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"1ba45f21-6874-4ff0-ca4b-38ee627763e9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Vento\n","85.5          1\n","FALSO         7\n","VERDADEIRO    6\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","    <tr>\n","      <th>Vento</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>85.5</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>FALSO</th>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>VERDADEIRO</th>\n","      <td>6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["# MODA\n","df.loc[df['Vento']==85.5, 'Vento'] = 'FALSO'"],"metadata":{"id":"y4y3wR7OVUO-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.groupby(['Vento']).size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"qhucdEqSVcDW","executionInfo":{"status":"ok","timestamp":1724116225528,"user_tz":180,"elapsed":9,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"ee1087b2-98ac-4b88-a22e-a06b3e16e2a4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Vento\n","FALSO         8\n","VERDADEIRO    6\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","    <tr>\n","      <th>Vento</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>FALSO</th>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>VERDADEIRO</th>\n","      <td>6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["ventos = df.groupby(['Vento']).size()\n","ventos\n","\n","ventos.plot.bar(figsize=(15,5), rot=0, color = 'teal', grid=True)\n","plt.title(\"\")\n","plt.xlabel(\"\")\n","plt.ylabel(\"\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"YDG-npS9ZOkN","executionInfo":{"status":"ok","timestamp":1724117270469,"user_tz":180,"elapsed":404,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"7033187a-cb81-4ec7-973a-48b23aaf342d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Vento\n","FALSO         8\n","VERDADEIRO    6\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","    <tr>\n","      <th>Vento</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>FALSO</th>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>VERDADEIRO</th>\n","      <td>6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":47}]},{"cell_type":"markdown","source":["# APARENCIA"],"metadata":{"id":"7EaaCQUaYbMG"}},{"cell_type":"code","source":["df.groupby(['Aparencia']).size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"id":"NIhSyaAVVnMk","executionInfo":{"status":"ok","timestamp":1724116279293,"user_tz":180,"elapsed":386,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"2154b3db-7d91-408b-9e28-087b9ac36cc2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Aparencia\n","85.5       1\n","chuva      4\n","menos      1\n","nublado    3\n","sol        5\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","    <tr>\n","      <th>Aparencia</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>85.5</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>chuva</th>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>menos</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>nublado</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>sol</th>\n","      <td>5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["# MODA\n","df.loc[df['Aparencia']==85.5,'Aparencia'] = 'sol'"],"metadata":{"id":"jT4i4zS7VrwU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.groupby(['Aparencia']).size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"iGlONTMyV8mF","executionInfo":{"status":"ok","timestamp":1724116358477,"user_tz":180,"elapsed":409,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"7f392b05-b03b-4110-c9c2-52809f9da6d2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Aparencia\n","chuva      4\n","menos      1\n","nublado    3\n","sol        6\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","    <tr>\n","      <th>Aparencia</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>chuva</th>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>menos</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>nublado</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>sol</th>\n","      <td>6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["aparencia = df.groupby(['Aparencia']).size()\n","aparencia\n","\n","aparencia.plot.bar(figsize=(15,5), rot=0, color = 'purple', grid=True)\n","plt.title(\"Tipos de Aparencia\")\n","plt.xlabel(\"Tipo\")\n","plt.ylabel(\"Quantidade\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"AFZMQhBSZExm","executionInfo":{"status":"ok","timestamp":1724117193577,"user_tz":180,"elapsed":431,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"87e1b87f-b238-4e4e-c35d-308d85399afc"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# TEMPERATURA"],"metadata":{"id":"ATR8frr1Yha1"}},{"cell_type":"code","source":["df.groupby(['Temperatura']).size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":554},"id":"Hgxq4tH-V_F1","executionInfo":{"status":"ok","timestamp":1724116604999,"user_tz":180,"elapsed":344,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"c0258ace-a729-48b4-8d02-7fc47f54d42f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Temperatura\n","64.0      1\n","65.0      1\n","68.0      1\n","69.0      1\n","70.0      1\n","71.0      1\n","72.0      1\n","75.0      1\n","80.0      1\n","81.0      1\n","83.0      1\n","85.0      1\n","85.5      1\n","1220.0    1\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","    <tr>\n","      <th>Temperatura</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>64.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>65.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>68.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>69.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>70.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>71.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>72.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>75.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>80.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>81.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>83.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>85.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>85.5</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1220.0</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["# MEDIANA NO LUGAR DO VALOR\n","medianaTemperatura = sts.median(df['Temperatura'])\n","\n","df.loc[df['Temperatura'] > 130,'Temperatura'] = medianaTemperatura"],"metadata":{"id":"_G5pRINRWI34"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.groupby(['Temperatura']).size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":554},"id":"2qwcLoxVW1_N","executionInfo":{"status":"ok","timestamp":1724116627482,"user_tz":180,"elapsed":504,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"6e44c40c-c78a-4126-8d2c-f52c20c6f000"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Temperatura\n","64.0    1\n","65.0    1\n","68.0    1\n","69.0    1\n","70.0    1\n","71.0    1\n","72.0    1\n","73.5    1\n","75.0    1\n","80.0    1\n","81.0    1\n","83.0    1\n","85.0    1\n","85.5    1\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","    <tr>\n","      <th>Temperatura</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>64.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>65.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>68.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>69.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>70.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>71.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>72.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>73.5</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>75.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>80.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>81.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>83.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>85.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>85.5</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["df['Temperatura'].plot(style='-o' , linewidth=2.5, color='gold', figsize=(15,5), grid=True);\n","plt.title('Temperatura')\n","plt.xlabel('Período')\n","plt.ylabel('Temperatura')\n","plt.legend(['Temperatura'], loc='upper left')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"tLZAcYvdZW-M","executionInfo":{"status":"ok","timestamp":1724117273454,"user_tz":180,"elapsed":1816,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"e3c2e865-4131-43d1-bfe5-1c1912aee24d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["temp = df['Temperatura']\n","temp\n","\n","temp.plot(style='-o' , linewidth=2.5, color='blue', figsize=(15,5), grid=True);\n","plt.title('Temperatura')\n","plt.xlabel('Período')\n","plt.ylabel('Temperatura')\n","plt.legend(['Temperatura'], loc='upper left')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"bhwRAnG0Zbcp","executionInfo":{"status":"ok","timestamp":1724117354691,"user_tz":180,"elapsed":519,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"7d0e2f06-62b1-4aa3-aa84-41a0026c2802"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["srn.boxplot(temp).set_title(\"Temperatura\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"id":"U19vkEFHZ0o2","executionInfo":{"status":"ok","timestamp":1724117399729,"user_tz":180,"elapsed":362,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"84fdb2bf-5ac7-4e14-c576-e11b652bff7d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Temperatura')"]},"metadata":{},"execution_count":52},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#srn.boxplot(data=df.Temperatura, orient='v').set_title('Temperatura')\n","srn.boxplot(data=df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"5XuhjKR2Z-03","executionInfo":{"status":"ok","timestamp":1724117418746,"user_tz":180,"elapsed":365,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"3c421142-4a8f-407d-e61d-17edc46f485f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":53},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["srn.histplot(df.iloc[:,1], kde=True ,bins=6, color=\"darkred\").set(title=\"Histograma Completo de Temperatura\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"id":"qWys5SSaaFvP","executionInfo":{"status":"ok","timestamp":1724117446622,"user_tz":180,"elapsed":2265,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"a8c7a26d-9a02-4b3a-c5eb-4c596d13ba0f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Text(0.5, 1.0, 'Histograma Completo de Temperatura')]"]},"metadata":{},"execution_count":54},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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UlISMjMzpS6jQbCxsYGLi4vUZRARNQiShZvk5GS88847iIyMhKGh4TNbTkREBObMmfPM5k+1k5SUBF8fHxQWFUldSoNgbGSES5cvM+AQEdWAZOHmxIkTuHPnDtq2batuq6iowOHDh7F06VKUlJRAV1dXYxoHBwekp6drtKWnp8PBwaHa5YSHh2PatGnq8dzcXDg7O9fRs6DayszMRGFREWYOGQJXW1upy9FqiRkZmLtzJzIzMxluiIhqQLJw06tXL5w7d06jbcyYMfDx8cEHH3xQKdgAQHBwMKKiojROF4+MjERwcHC1y1EqlVAqlXVWN9UtV1tbeDs6Sl0GERHJiGThxszMDP7+/hptJiYmaNKkibp91KhRcHJyQkREBADgnXfeQbdu3bBw4UL0798fW7duRVxcHFauXFnv9RMREZF2kvxsqUdJSkpCamqqejwkJASbN2/GypUrERAQgO3bt2PXrl2VQhIRERE1XpKeLfV30dHRjxwHgKFDh2Lo0KH1UxARERE1OFq95YaIiIjoSTHcEBERkaww3BAREZGsMNwQERGRrDDcEBERkaww3BAREZGsMNwQERGRrDDcEBERkaww3BAREZGsMNwQERGRrDDcEBERkaww3BAREZGsMNwQERGRrDDcEBERkaww3BAREZGsMNwQERGRrDDcEBERkaww3BAREZGsMNwQERGRrDDcEBERkaww3BAREZGsMNwQERGRrDDcEBERkaww3BAREZGsMNwQERGRrDDcEBERkaww3BAREZGsMNwQERGRrDDcEBERkaww3BAREZGsMNwQERGRrDDcEBERkaww3BAREZGsSBpuli9fjtatW8Pc3Bzm5uYIDg7G3r17q+2/bt06KBQKjcHQ0LAeKyYiIiJtpyflwps1a4bPP/8cXl5eEEJg/fr1GDRoEE6dOoWWLVtWOY25uTmuXLmiHlcoFPVVLhERETUAkoabAQMGaIzPnz8fy5cvx9GjR6sNNwqFAg4ODvVRHhERETVAWnPMTUVFBbZu3YqCggIEBwdX2y8/Px+urq5wdnbGoEGDcOHChXqskoiIiLSdpFtuAODcuXMIDg5GcXExTE1NsXPnTvj5+VXZ19vbG2vWrEHr1q2Rk5ODr776CiEhIbhw4QKaNWtW5TQlJSUoKSlRj+fm5j6T50FERETaQfItN97e3jh9+jT+/PNPvPXWWxg9ejQuXrxYZd/g4GCMGjUKgYGB6NatG3bs2AFbW1t8++231c4/IiICFhYW6sHZ2flZPRUiIiLSApKHGwMDA3h6eiIoKAgREREICAjAkiVLajStvr4+2rRpg+vXr1fbJzw8HDk5OeohOTm5rkonIiIiLSR5uPk7lUqlsRvpUSoqKnDu3Dk4OjpW20epVKpPNX8wEBERkXxJesxNeHg4+vXrBxcXF+Tl5WHz5s2Ijo7G/v37AQCjRo2Ck5MTIiIiAABz585Fp06d4OnpiezsbHz55ZdITEzEuHHjpHwaREREpEUkDTd37tzBqFGjkJqaCgsLC7Ru3Rr79+/H888/DwBISkqCjs7/Ni7du3cP48ePR1paGqysrBAUFISYmJhqD0AmIiKixkfScPPdd9898vHo6GiN8UWLFmHRokXPsCIiIiJq6LTumBsiIiKip8FwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESyImm4Wb58OVq3bg1zc3OYm5sjODgYe/fufeQ027Ztg4+PDwwNDdGqVSvs2bOnnqolIiKihkDScNOsWTN8/vnnOHHiBOLi4tCzZ08MGjQIFy5cqLJ/TEwMhg8fjrFjx+LUqVMYPHgwBg8ejPPnz9dz5URERKStJA03AwYMwAsvvAAvLy+0aNEC8+fPh6mpKY4ePVpl/yVLlqBv376YPn06fH19MW/ePLRt2xZLly6t58qJiIhIW2nNMTcVFRXYunUrCgoKEBwcXGWf2NhY9O7dW6MtNDQUsbGx9VEiERERNQB6Uhdw7tw5BAcHo7i4GKampti5cyf8/Pyq7JuWlgZ7e3uNNnt7e6SlpVU7/5KSEpSUlKjHc3Nz66ZwIiJqVJKSkpCZmSl1GQ2CjY0NXFxcJFu+5OHG29sbp0+fRk5ODrZv347Ro0fjt99+qzbgPKmIiAjMmTOn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sWfPHo22yMhIBAcHVzuNUqmEUql81qURkRZxsrKCt6Oj1GVotcTMTKlLIHpmJD2gOD8/H6dPn8bp06cB3D/V+/Tp00hKSgJwf6vLqFGj1P0nTpyImzdv4v3338fly5fxzTff4Mcff8S7774rRflERESkhSQNN3FxcWjTpg3atGkDAJg2bRratGmDmTNnAgBSU1PVQQcA3N3d8csvvyAyMhIBAQFYuHAhVq9ezdPAiYiISE3S3VLdu3eHEKLax6u6+nD37t1x6tSpZ1gVERERNWQN6jo3RERERI/DcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREsqIV4WbZsmVwc3ODoaEhOnbsiGPHjlXbd926dVAoFBqDoaFhPVZLRERE2kzycPPDDz9g2rRpmDVrFk6ePImAgACEhobizp071U5jbm6O1NRU9ZCYmFiPFRMREZE2kzzcfP311xg/fjzGjBkDPz8/rFixAsbGxlizZk210ygUCjg4OKgHe3v7eqyYiIiItJmk4aa0tBQnTpxA79691W06Ojro3bs3YmNjq50uPz8frq6ucHZ2xqBBg3DhwoX6KJeIiIgaAEnDTWZmJioqKiptebG3t0daWlqV03h7e2PNmjXYvXs3Nm7cCJVKhZCQENy6davK/iUlJcjNzdUYiIiISL4k3y31pIKDgzFq1CgEBgaiW7du2LFjB2xtbfHtt99W2T8iIgIWFhbqwdnZuZ4rJiIiovokabixsbGBrq4u0tPTNdrT09Ph4OBQo3no6+ujTZs2uH79epWPh4eHIycnRz0kJyc/dd1ERESkvSQNNwYGBggKCkJUVJS6TaVSISoqCsHBwTWaR0VFBc6dOwdHR8cqH1cqlTA3N9cYiIiISL70pC5g2rRpGD16NNq1a4cOHTpg8eLFKCgowJgxYwAAo0aNgpOTEyIiIgAAc+fORadOneDp6Yns7Gx8+eWXSExMxLhx46R8GkRERKQlJA83w4YNQ0ZGBmbOnIm0tDQEBgZi37596oOMk5KSoKPzvw1M9+7dw/jx45GWlgYrKysEBQUhJiYGfn5+Uj0FIiIi0iKShxsAmDx5MiZPnlzlY9HR0RrjixYtwqJFi+qhKiIiImqIGtzZUkRERESPwnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLKiFeFm2bJlcHNzg6GhITp27Ihjx449sv+2bdvg4+MDQ0NDtGrVCnv27KmnSomIiEjbSR5ufvjhB0ybNg2zZs3CyZMnERAQgNDQUNy5c6fK/jExMRg+fDjGjh2LU6dOYfDgwRg8eDDOnz9fz5UTERGRNpI83Hz99dcYP348xowZAz8/P6xYsQLGxsZYs2ZNlf2XLFmCvn37Yvr06fD19cW8efPQtm1bLF26tJ4rJyIiIm0kabgpLS3FiRMn0Lt3b3Wbjo4OevfujdjY2CqniY2N1egPAKGhodX2JyIiosZFT8qFZ2ZmoqKiAvb29hrt9vb2uHz5cpXTpKWlVdk/LS2tyv4lJSUoKSlRj+fk5AAAcnNzn6b0KuXn5wMArt6+jaLS0jqfv5wkZmQAAG5mZMAkMVHiarQbX6ua42tVc3ytngxfr5pLzswEcP87sS6/ax/MSwjx+M5CQikpKQKAiImJ0WifPn266NChQ5XT6Ovri82bN2u0LVu2TNjZ2VXZf9asWQIABw4cOHDgwEEGQ3Jy8mPzhaRbbmxsbKCrq4v09HSN9vT0dDg4OFQ5jYODwxP1Dw8Px7Rp09TjKpUKWVlZaNKkCRQKxVM+g2cvNzcXzs7OSE5Ohrm5udTlUBW4jrQf15F24/rRftqwjoQQyMvLQ9OmTR/bV9JwY2BggKCgIERFRWHw4MEA7oePqKgoTJ48ucpp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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# JOGAR"],"metadata":{"id":"ILEkEi8_Yqbm"}},{"cell_type":"code","source":["df.groupby(['Jogar']).size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":210},"id":"ohWsUSTZXCJO","executionInfo":{"status":"ok","timestamp":1724116680476,"user_tz":180,"elapsed":332,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"250d590d-ff40-4cc3-ed74-81d6eba89631"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Jogar\n","85.5    1\n","nao     5\n","sim     8\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","    <tr>\n","      <th>Jogar</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>85.5</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>nao</th>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>sim</th>\n","      <td>8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["# MODA\n","df.loc[df['Jogar']==85.5,'Jogar'] = 'sim'\n","\n","df.groupby(['Jogar']).size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"f8J7VFphXNLN","executionInfo":{"status":"ok","timestamp":1724116764994,"user_tz":180,"elapsed":549,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"1f77aeb6-d272-492e-9fcb-0f4f2afa3043"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Jogar\n","nao    5\n","sim    9\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","    <tr>\n","      <th>Jogar</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>nao</th>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>sim</th>\n","      <td>9</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"Kyk0uGA6XoEM","executionInfo":{"status":"ok","timestamp":1724116798993,"user_tz":180,"elapsed":331,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"48387bf3-2655-40a1-ad32-233d2267ff30"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Aparencia      0\n","Temperatura    0\n","Umidade        0\n","Vento          0\n","Jogar          0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Aparencia</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Temperatura</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Umidade</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Vento</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Jogar</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["jogue = df.groupby(['Jogar']).size()\n","jogue\n","\n","jogue.plot.bar(figsize=(15,5), rot=0, color = 'orange', grid=True)\n","plt.title(\"Tipos de Aparencia\")\n","plt.xlabel(\"Tipo\")\n","plt.ylabel(\"Quantidade\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"yA82ifk8aJ4W","executionInfo":{"status":"ok","timestamp":1724117505031,"user_tz":180,"elapsed":362,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"516f3753-dc95-4eb1-e790-a830b1aeabff"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# NORMALIZAÇÃO Z & MAX MIN"],"metadata":{"id":"7W4XsAzgUaSw"}},{"cell_type":"code","source":["df1 = pd.read_csv(\"/content/Dados.csv\", sep=\";\")\n","df1.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OyXjmiOzPsA6","executionInfo":{"status":"ok","timestamp":1725810787131,"user_tz":180,"elapsed":317,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"ceb93069-c5c6-4652-8534-a902827a5905"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 3 entries, 0 to 2\n","Data columns (total 3 columns):\n"," #   Column   Non-Null Count  Dtype  \n","---  ------   --------------  -----  \n"," 0   produto  3 non-null      object \n"," 1   preco    3 non-null      int64  \n"," 2   peso     3 non-null      float64\n","dtypes: float64(1), int64(1), object(1)\n","memory usage: 200.0+ bytes\n"]}]},{"cell_type":"code","source":["df1.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"NClyR3P-Sfom","executionInfo":{"status":"ok","timestamp":1725810792182,"user_tz":180,"elapsed":327,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"461013a9-af1a-464f-e739-f9ad8ac8d309"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            preco      peso\n","count    3.000000  3.000000\n","mean   216.666667  2.433333\n","std     76.376262  0.602771\n","min    150.000000  1.800000\n","25%    175.000000  2.150000\n","50%    200.000000  2.500000\n","75%    250.000000  2.750000\n","max    300.000000  3.000000"],"text/html":["\n","  <div id=\"df-b1f28425-33de-40d6-a0d2-d075af62113f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>preco</th>\n","      <th>peso</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>3.000000</td>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>216.666667</td>\n","      <td>2.433333</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>76.376262</td>\n","      <td>0.602771</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>150.000000</td>\n","      <td>1.800000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>175.000000</td>\n","      <td>2.150000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>200.000000</td>\n","      <td>2.500000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>250.000000</td>\n","      <td>2.750000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>300.000000</td>\n","      <td>3.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b1f28425-33de-40d6-a0d2-d075af62113f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b1f28425-33de-40d6-a0d2-d075af62113f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b1f28425-33de-40d6-a0d2-d075af62113f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-09e4c188-3c84-402d-b627-6d074abbf927\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-09e4c188-3c84-402d-b627-6d074abbf927')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-09e4c188-3c84-402d-b627-6d074abbf927 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df1\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"preco\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 95.20049436395367,\n        \"min\": 3.0,\n        \"max\": 300.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          216.66666666666666,\n          200.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"peso\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7919239742678003,\n        \"min\": 0.6027713773341707,\n        \"max\": 3.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          3.0,\n          2.433333333333333,\n          2.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["df1.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"nq2zMU_aSiDQ","executionInfo":{"status":"ok","timestamp":1725810796297,"user_tz":180,"elapsed":513,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"2c2d6563-8eeb-4020-b8d4-7ef1488306af"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  produto  preco  peso\n","0       A    200   2.5\n","1       B    150   1.8\n","2       C    300   3.0"],"text/html":["\n","  <div id=\"df-c05680d8-fcdb-443d-a8a3-9560ac556fa9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>produto</th>\n","      <th>preco</th>\n","      <th>peso</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A</td>\n","      <td>200</td>\n","      <td>2.5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>B</td>\n","      <td>150</td>\n","      <td>1.8</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>300</td>\n","      <td>3.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c05680d8-fcdb-443d-a8a3-9560ac556fa9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c05680d8-fcdb-443d-a8a3-9560ac556fa9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c05680d8-fcdb-443d-a8a3-9560ac556fa9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-607cbfe2-f4fa-4598-951f-5146c3075a70\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-607cbfe2-f4fa-4598-951f-5146c3075a70')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-607cbfe2-f4fa-4598-951f-5146c3075a70 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df1\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"produto\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"A\",\n          \"B\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"preco\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 76,\n        \"min\": 150,\n        \"max\": 300,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          200,\n          150,\n          300\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"peso\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6027713773341707,\n        \"min\": 1.8,\n        \"max\": 3.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2.5,\n          1.8,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["df1.isnull()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"1msBq-VsSmKV","executionInfo":{"status":"ok","timestamp":1725810800703,"user_tz":180,"elapsed":327,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"4e756865-4af5-4747-ee09-ba70e93fc40e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   produto  preco   peso\n","0    False  False  False\n","1    False  False  False\n","2    False  False  False"],"text/html":["\n","  <div id=\"df-998018ae-4b1a-4430-bcaa-1f4078fca82a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>produto</th>\n","      <th>preco</th>\n","      <th>peso</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-998018ae-4b1a-4430-bcaa-1f4078fca82a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-998018ae-4b1a-4430-bcaa-1f4078fca82a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-998018ae-4b1a-4430-bcaa-1f4078fca82a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e8ec834a-f228-4b85-8789-9d64b221924d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e8ec834a-f228-4b85-8789-9d64b221924d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e8ec834a-f228-4b85-8789-9d64b221924d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df1\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"produto\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"preco\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"peso\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing import MinMaxScaler\n","\n","# Exemplo de DataFrame\n","data = {'Preço': [200000, 300000, 400000, 500000],\n","        'Peso': [1200, 1500, 1800, 2000]}\n","df = pd.DataFrame(data)\n","\n","# Inicializando o MinMaxScaler\n","scaler = MinMaxScaler()\n","\n","# Aplicando a normalização nas colunas \"Preço\" e \"Peso\"\n","df[['Preço', 'Peso']] = scaler.fit_transform(df[['Preço', 'Peso']])\n","\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Kw_jT9ePS-C4","executionInfo":{"status":"ok","timestamp":1725810888992,"user_tz":180,"elapsed":482,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"b1dd90f9-187a-425d-a4fe-fb2cc87effa2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["      Preço   Peso\n","0  0.000000  0.000\n","1  0.333333  0.375\n","2  0.666667  0.750\n","3  1.000000  1.000\n"]}]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","\n","# Exemplo de DataFrame\n","data = {'Velocidade': [120, 150, 130, 250],\n","        'Consumo': [10, 8, 12, 25]}\n","df = pd.DataFrame(data)\n","\n","# Inicializando o StandardScaler\n","scaler = StandardScaler()\n","\n","# Aplicando a normalização Z-Score nas colunas \"Velocidade\" e \"Consumo\"\n","df[['Velocidade', 'Consumo']] = scaler.fit_transform(df[['Velocidade', 'Consumo']])\n","\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oc1b9jktT2Xh","executionInfo":{"status":"ok","timestamp":1725810432563,"user_tz":180,"elapsed":321,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"7442931e-582c-4715-e8fe-dd58f922bc70"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   Velocidade   Consumo\n","0   -0.822688 -0.564133\n","1   -0.241967 -0.865004\n","2   -0.629114 -0.263262\n","3    1.693769  1.692399\n"]}]},{"cell_type":"markdown","source":["# *NAIVE BAYES*\n"],"metadata":{"id":"lgD8ei3Z1dGI"}},{"cell_type":"code","source":["from sklearn.naive_bayes import CategoricalNB\n","import numpy as np\n","\n","# Dados de treinamento\n","X = np.array([\n","    [1, 0, 1, 0],  # sim, não, sim, não\n","    [1, 1, 0, 0],  # sim, sim, não, não\n","    [0, 1, 0, 1],  # não, sim, não, sim\n","    [1, 0, 1, 0],  # sim, não, sim, não\n","    [0, 0, 1, 1],  # não, não, sim, sim\n","    [0, 1, 0, 1],  # não, sim, não, sim\n","    [1, 1, 0, 0],  # sim, sim, não, não\n","    [0, 0, 1, 1],  # não, não, sim, sim\n","    [1, 1, 0, 1],  # sim, sim, não, sim\n","    [1, 1, 1, 1]   # sim, sim, sim, sim\n","])\n","\n","y = np.array([1, 1, 0, 1, 0, 0, 0, 1, 0, 1])  # 1 = Gripe, 0 = Não Gripe\n","\n","# Modelo Naive Bayes\n","model = CategoricalNB()\n","\n","# Treinando o modelo\n","model.fit(X, y)\n","\n","# Dados de teste: Coriza=sim, Tosse=não, Febre=sim, Dor no Corpo=não\n","X_test = np.array([[1, 0, 1, 0]])\n","\n","# Fazendo a previsão\n","pred = model.predict(X_test)\n","\n","# Saída da previsão\n","if pred == 1:\n","    print(\"A pessoa está com Gripe.\")\n","else:\n","    print(\"A pessoa não está com Gripe.\")\n"],"metadata":{"id":"sib2bqnl1l7H","executionInfo":{"status":"ok","timestamp":1726439925082,"user_tz":180,"elapsed":2107,"user":{"displayName":"Matheus Lopes Lourenço","userId":"12347411649578773815"}},"outputId":"493dd46c-c534-4bb7-bbed-a81fdc2dbbd8","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["A pessoa está com Gripe.\n"]}]}]}